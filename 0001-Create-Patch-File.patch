From bed76d2878a8e06f41f4355339bc698983c5e086 Mon Sep 17 00:00:00 2001
From: Deepak Singh <dsingh20800@gmail.com>
Date: Tue, 5 May 2020 00:15:21 +0100
Subject: [PATCH] Create Patch File

---
 __pycache__/client3.cpython-38.pyc | Bin 0 -> 1130 bytes
 client3.py                         |  10 ++++++---
 client_test.py                     |  32 +++++++++++++++++++++++++++++
 3 files changed, 39 insertions(+), 3 deletions(-)
 create mode 100644 __pycache__/client3.cpython-38.pyc

diff --git a/__pycache__/client3.cpython-38.pyc b/__pycache__/client3.cpython-38.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..8f8e602261850adac30d5d4be0060f9ed69e6d3c
GIT binary patch
literal 1130
zcmYjQPj3@P6rb6hU9S@xT=LiDGOdJKO9Z>(f&y)U1S(Z+6hIt0qO3MM&+(G=t}`=6
z#C1;YXXx2Ea^q8Q;1i&^_Qai2PklR1B4+gd&YRiye(&w`W^;+)`uNYgm+$L@{974c
zF7%Q6NcsaZNhHmQpiX+ibJ7>SlT0w_i9q@yluQPH6H$|)tf7pcE~6t)y@w@OhHyq_
zbeH`3Ml`^mH-WyoGQSGJyajB|&d3=(qw}vSDXwKitiUyl?TJ;W!Rm~@U}8<Iiw&^}
zo3H|F_XxCQ9oAqSHej>Q*2#=ga{LCpOAx_|Ty7KOjW(Hi=V!l3`iyj%pRgXXH~D5@
z%xJsY&C4{&2c<UKcY1ev-QzK+lb<vB<6o!QXG%zlbh!f57}5@szK?8*xU|VBHI?SI
ziS+S%^we`UyR`kOH}yA&46c(?Hl>v{WqpR(gp+N)uSz*ifhT#+%RV;);01sL$zLb=
z7&JE}KZF8QVlary#3Z9KD-5@RHf4HbYo;8<2br|NNM$K3>_i`Z@-W2?wLw2G6VnN7
za6B#zsLE~Ycp+ZI*D-dXs;auTL@lHE?{0Tc4xuXnM#+&b4tu@sZkdjUP#E3)b^rIB
zEd%Lb%i!&;AGSs(x4UVc;o<FDqZ8XW1hb2o?z>F!Iqk;Hk7x^bgQ_O_(khdSRp}Ku
za92^8Qb}=m8q#})@J{J<f`IvxZ}~4^ID(Ot6<n@_IN?bl&-DYYs;2F^DmtF6orhc~
z2kv0O8W?CJ%=KyYUI#55A|ouKjH;G9jpJdG6>&WI?nwoo<To@=4F4Vh+`gf2a;)D;
z_ZieWlgPb>an^tEaL4+)j~;iv7FWh9&$EMD3UJ7@5#hqN%w$6l?3FGH5h|>s9E#w{
z^G8qruyoJibeTwz3?Ys!%dm?!z}Q2uG`0cuS87qac)5lzmm?@_*e}&EF_tMvqzzsB
zwFq6NT18l%8wOSV?5b*z8vr*)h4})eY97=At9wJ7)*OCXLzm{rBI>r!eC9=U+<uF4
LpP{#fwC?>6D<vJh

literal 0
HcmV?d00001

diff --git a/client3.py b/client3.py
index f1771c3..0ae3017 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,16 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if (price_b == 0):
+		return # this avoids price_b throwing ZeroDivisionError if it's 0
+	return price_a / price_b
 
 # Main
 if __name__ == "__main__":
@@ -52,8 +54,10 @@ if __name__ == "__main__":
 		quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			prices[stock] = price
 			print ("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-		print ("Ratio %s" % getRatio(price, price))
+		print ("Ratio %s" % (getRatio(prices['ABC'], prices['DEF'])))
diff --git a/client_test.py b/client_test.py
index af2bf26..43324a0 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,6 @@
 import unittest
 from client3 import getDataPoint
+from client3 import getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +9,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -16,10 +19,39 @@ class ClientTest(unittest.TestCase):
     ]
     """ ------------ Add the assertion below ------------ """
 
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote), (quote['stock'], quote['top_bid']['price'], quote['top_ask']['price'], (quote['top_bid']['price'] + quote['top_ask']['price']) / 2))
 
   """ ------------ Add more unit tests ------------ """
 
+  """ ------------ Assertion to ensure the right ratio is calculated ------------ """
+  def test_getRatio_calculateRatio(self):
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+
+    stock, bid_price, ask_price, price  = getDataPoint(quotes[0])
+    price_a = price
+
+    stock, bid_price, ask_price, price  = getDataPoint(quotes[1])
+    price_b = price
+
+    ratio = (price_a / price_b)
+
+    self.assertEqual(getRatio(price_a, price_b), ratio) 
+  
+  """ ------------ Assertion to ensure the right ratio is calculated if one of the prices is 0 ------------ """
+  def test_getRatio_calculateRatioPriceIsZero(self):
+    quotes = [
+      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+
+    price_a = getDataPoint(quotes[0])
+    price_b = 0
 
+    self.assertEqual(getRatio(price_a, price_b), None) 
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.25.1

